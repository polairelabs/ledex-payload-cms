/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "OrderStatus".
 */
export type OrderStatus = ('processing' | 'completed' | 'cancelled' | 'refunded') | null;
/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    categories: Category;
    addresses: Address;
    variants: Variant;
    variantTypes: VariantType;
    variantOptions: VariantOption;
    products: Product;
    carts: Cart;
    orders: Order;
    transactions: Transaction;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    users: {
      orders: 'orders';
      cart: 'carts';
      addresses: 'addresses';
    };
    variantTypes: {
      options: 'variantOptions';
    };
    products: {
      variants: 'variants';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    addresses: AddressesSelect<false> | AddressesSelect<true>;
    variants: VariantsSelect<false> | VariantsSelect<true>;
    variantTypes: VariantTypesSelect<false> | VariantTypesSelect<true>;
    variantOptions: VariantOptionsSelect<false> | VariantOptionsSelect<true>;
    products: ProductsSelect<false> | ProductsSelect<true>;
    carts: CartsSelect<false> | CartsSelect<true>;
    orders: OrdersSelect<false> | OrdersSelect<true>;
    transactions: TransactionsSelect<false> | TransactionsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
  /**
   * Generated by the Payload Ecommerce plugin
   */
  ecommerce: {
    collections: {
      addresses: Address;
      carts: Cart;
      customers?: User;
      orders: Order;
      products: Product;
      transactions: Transaction;
      variantOptions: VariantOption;
      variants: Variant;
      variantTypes: VariantType;
    };
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  roles?: ('admin' | 'customer')[] | null;
  orders?: {
    docs?: (number | Order)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  cart?: {
    docs?: (number | Cart)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  addresses?: {
    docs?: (number | Address)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders".
 */
export interface Order {
  id: number;
  items?:
    | {
        product?: (number | null) | Product;
        variant?: (number | null) | Variant;
        quantity: number;
        id?: string | null;
      }[]
    | null;
  shippingAddress?: {
    title?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    company?: string | null;
    addressLine1?: string | null;
    addressLine2?: string | null;
    city?: string | null;
    state?: string | null;
    postalCode?: string | null;
    country?: string | null;
    phone?: string | null;
  };
  customer?: (number | null) | User;
  customerEmail?: string | null;
  transactions?: (number | Transaction)[] | null;
  status?: OrderStatus;
  amount?: number | null;
  currency?: 'USD' | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: number;
  title: string;
  description?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  gallery?:
    | {
        image: number | Media;
        variantOption?: (number | null) | VariantOption;
        id?: string | null;
      }[]
    | null;
  inventory?: number | null;
  enableVariants?: boolean | null;
  variantTypes?: (number | VariantType)[] | null;
  variants?: {
    docs?: (number | Variant)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  priceInUSDEnabled?: boolean | null;
  priceInUSD?: number | null;
  relatedProducts?: (number | Product)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  categories?: (number | Category)[] | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  caption?: {
    root: {
      type: string;
      children: {
        type: any;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "variantOptions".
 */
export interface VariantOption {
  id: number;
  _variantOptions_options_order?: string | null;
  variantType: number | VariantType;
  label: string;
  /**
   * should be defaulted or dynamic based on label
   */
  value: string;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "variantTypes".
 */
export interface VariantType {
  id: number;
  label: string;
  name: string;
  options?: {
    docs?: (number | VariantOption)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "variants".
 */
export interface Variant {
  id: number;
  /**
   * Used for administrative purposes, not shown to customers. This is populated by default.
   */
  title?: string | null;
  product: number | Product;
  options: (number | VariantOption)[];
  inventory?: number | null;
  priceInUSDEnabled?: boolean | null;
  priceInUSD?: number | null;
  updatedAt: string;
  createdAt: string;
  deletedAt?: string | null;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions".
 */
export interface Transaction {
  id: number;
  items?:
    | {
        product?: (number | null) | Product;
        variant?: (number | null) | Variant;
        quantity: number;
        id?: string | null;
      }[]
    | null;
  billingAddress?: {
    title?: string | null;
    firstName?: string | null;
    lastName?: string | null;
    company?: string | null;
    addressLine1?: string | null;
    addressLine2?: string | null;
    city?: string | null;
    state?: string | null;
    postalCode?: string | null;
    country?: string | null;
    phone?: string | null;
  };
  status: 'pending' | 'succeeded' | 'failed' | 'cancelled' | 'expired' | 'refunded';
  customer?: (number | null) | User;
  customerEmail?: string | null;
  order?: (number | null) | Order;
  cart?: (number | null) | Cart;
  amount?: number | null;
  currency?: 'USD' | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "carts".
 */
export interface Cart {
  id: number;
  items?:
    | {
        product?: (number | null) | Product;
        variant?: (number | null) | Variant;
        quantity: number;
        id?: string | null;
      }[]
    | null;
  customer?: (number | null) | User;
  purchasedAt?: string | null;
  status?: ('active' | 'purchased' | 'abandoned') | null;
  subtotal?: number | null;
  currency?: 'USD' | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "addresses".
 */
export interface Address {
  id: number;
  customer?: (number | null) | User;
  title?: string | null;
  firstName?: string | null;
  lastName?: string | null;
  company?: string | null;
  addressLine1?: string | null;
  addressLine2?: string | null;
  city?: string | null;
  state?: string | null;
  postalCode?: string | null;
  country:
    | 'US'
    | 'GB'
    | 'CA'
    | 'AU'
    | 'AT'
    | 'BE'
    | 'BR'
    | 'BG'
    | 'CY'
    | 'CZ'
    | 'DK'
    | 'EE'
    | 'FI'
    | 'FR'
    | 'DE'
    | 'GR'
    | 'HK'
    | 'HU'
    | 'IN'
    | 'IE'
    | 'IT'
    | 'JP'
    | 'LV'
    | 'LT'
    | 'LU'
    | 'MY'
    | 'MT'
    | 'MX'
    | 'NL'
    | 'NZ'
    | 'NO'
    | 'PL'
    | 'PT'
    | 'RO'
    | 'SG'
    | 'SK'
    | 'SI'
    | 'ES'
    | 'SE'
    | 'CH';
  phone?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'addresses';
        value: number | Address;
      } | null)
    | ({
        relationTo: 'variants';
        value: number | Variant;
      } | null)
    | ({
        relationTo: 'variantTypes';
        value: number | VariantType;
      } | null)
    | ({
        relationTo: 'variantOptions';
        value: number | VariantOption;
      } | null)
    | ({
        relationTo: 'products';
        value: number | Product;
      } | null)
    | ({
        relationTo: 'carts';
        value: number | Cart;
      } | null)
    | ({
        relationTo: 'orders';
        value: number | Order;
      } | null)
    | ({
        relationTo: 'transactions';
        value: number | Transaction;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  roles?: T;
  orders?: T;
  cart?: T;
  addresses?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "addresses_select".
 */
export interface AddressesSelect<T extends boolean = true> {
  customer?: T;
  title?: T;
  firstName?: T;
  lastName?: T;
  company?: T;
  addressLine1?: T;
  addressLine2?: T;
  city?: T;
  state?: T;
  postalCode?: T;
  country?: T;
  phone?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "variants_select".
 */
export interface VariantsSelect<T extends boolean = true> {
  title?: T;
  product?: T;
  options?: T;
  inventory?: T;
  priceInUSDEnabled?: T;
  priceInUSD?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "variantTypes_select".
 */
export interface VariantTypesSelect<T extends boolean = true> {
  label?: T;
  name?: T;
  options?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "variantOptions_select".
 */
export interface VariantOptionsSelect<T extends boolean = true> {
  _variantOptions_options_order?: T;
  variantType?: T;
  label?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products_select".
 */
export interface ProductsSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  gallery?:
    | T
    | {
        image?: T;
        variantOption?: T;
        id?: T;
      };
  inventory?: T;
  enableVariants?: T;
  variantTypes?: T;
  variants?: T;
  priceInUSDEnabled?: T;
  priceInUSD?: T;
  relatedProducts?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  categories?: T;
  updatedAt?: T;
  createdAt?: T;
  deletedAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "carts_select".
 */
export interface CartsSelect<T extends boolean = true> {
  items?:
    | T
    | {
        product?: T;
        variant?: T;
        quantity?: T;
        id?: T;
      };
  customer?: T;
  purchasedAt?: T;
  status?: T;
  subtotal?: T;
  currency?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "orders_select".
 */
export interface OrdersSelect<T extends boolean = true> {
  items?:
    | T
    | {
        product?: T;
        variant?: T;
        quantity?: T;
        id?: T;
      };
  shippingAddress?:
    | T
    | {
        title?: T;
        firstName?: T;
        lastName?: T;
        company?: T;
        addressLine1?: T;
        addressLine2?: T;
        city?: T;
        state?: T;
        postalCode?: T;
        country?: T;
        phone?: T;
      };
  customer?: T;
  customerEmail?: T;
  transactions?: T;
  status?: T;
  amount?: T;
  currency?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "transactions_select".
 */
export interface TransactionsSelect<T extends boolean = true> {
  items?:
    | T
    | {
        product?: T;
        variant?: T;
        quantity?: T;
        id?: T;
      };
  billingAddress?:
    | T
    | {
        title?: T;
        firstName?: T;
        lastName?: T;
        company?: T;
        addressLine1?: T;
        addressLine2?: T;
        city?: T;
        state?: T;
        postalCode?: T;
        country?: T;
        phone?: T;
      };
  status?: T;
  customer?: T;
  customerEmail?: T;
  order?: T;
  cart?: T;
  amount?: T;
  currency?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}